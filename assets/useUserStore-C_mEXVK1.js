var R=Object.defineProperty;var w=(a,e,r)=>e in a?R(a,e,{enumerable:!0,configurable:!0,writable:!0,value:r}):a[e]=r;var u=(a,e,r)=>w(a,typeof e!="symbol"?e+"":e,r);import{a as I,g as C,W as h,X as o,Y as P,am as Q,c as m,h as $,d as x,an as S,r as g}from"./index-DstSLrEY.js";import{e as f}from"./PrimaryButton.vue_vue_type_script_setup_true_lang-BAMRnORH.js";const A=I({name:"QPage",props:{padding:Boolean,styleFn:Function},setup(a,{slots:e}){const{proxy:{$q:r}}=C(),t=h(P,o);if(t===o)return console.error("QPage needs to be a deep child of QLayout"),o;if(h(Q,o)===o)return console.error("QPage needs to be child of QPageContainer"),o;const c=m(()=>{const i=(t.header.space===!0?t.header.size:0)+(t.footer.space===!0?t.footer.size:0);if(typeof a.styleFn=="function"){const d=t.isContainer.value===!0?t.containerHeight.value:r.screen.height;return a.styleFn(i,d)}return{minHeight:t.isContainer.value===!0?t.containerHeight.value-i+"px":r.screen.height===0?i!==0?`calc(100vh - ${i}px)`:"100vh":r.screen.height-i+"px"}}),n=m(()=>`q-page${a.padding===!0?" q-layout-padding":""}`);return()=>$("main",{class:n.value,style:c.value},x(e.default))}});class l{constructor(e="",r="",t=""){this.message=e,this.riskLevel=r,this.additionalInfo=t}static fromJson(e){if(e)return new l(e.message||"",e.riskLevel||"",e.additionalInfo||"")}toJson(){return{message:this.message,riskLevel:this.riskLevel,additionalInfo:this.additionalInfo}}}class p{constructor(e="",r=0,t=0,s=0,c=0,n=0,i="",d="",v=0){this.userId=e,this.temperaturaMediaDiaria=r,this.umidadeRelativaAr=t,this.precipitacao=s,this.indiceUmidadeSolo=c,this.indiceVegetacao=n,this.localizacao=i,this.dataHora=d,this.areaQueimada=v}static fromJson(e){if(e)return new p(e.userId,e.temperaturaMediaDiaria,e.umidadeRelativaAr,e.precipitacao,e.indiceUmidadeSolo,e.indiceVegetacao,e.localizacao,e.dataHora,e.areaQueimada)}toString(){return`${this.localizacao}, ${this.temperaturaMediaDiaria}°C, ${this.umidadeRelativaAr}% RH, ${this.precipitacao}mm precipitação, Área queimada: ${this.areaQueimada} ha`}toJson(){return{userId:this.userId,temperaturaMediaDiaria:this.temperaturaMediaDiaria,umidadeRelativaAr:this.umidadeRelativaAr,precipitacao:this.precipitacao,indiceUmidadeSolo:this.indiceUmidadeSolo,indiceVegetacao:this.indiceVegetacao,localizacao:this.localizacao,areaQueimada:this.areaQueimada}}}class b{async createReport(e){try{console.log(e);const r=await f.requestPostWithApiKey("/reports/burn",e.toJson());return p.fromJson(r)}catch{throw new Error("Erro ao salvar relatório")}}async predict(){const e=localStorage.getItem("accessToken"),r=Object.fromEntries(Object.entries({userId:e}).filter(([,t])=>t!==void 0));try{const t=await f.requestGet("/reports/predict",r);if(console.log("Data recebida:",t),t&&t.message&&t.riskLevel){const s=l.fromJson(t);return console.log("Previsão recebida:",s),s}else throw new Error("Formato de resposta inesperado")}catch{throw new Error("Erro ao buscar dados para previsão")}}}class D{constructor(e){u(this,"reportRepository");this.reportRepository=e}async execute(e){return await this.reportRepository.createReport(e)}async executePredict(){return await this.reportRepository.predict()}}const z=new b,y=new D(z),E=S("report",{state:()=>({reports:g([]),predict:g(null),totalItemsInDB:0}),getters:{getPredict:a=>a.reports,getPredicts:a=>a.totalItemsInDB},actions:{async fetchPredict(){const a=await y.executePredict();a?this.predict=a:this.predict=null},async createReport(a){return await y.execute(a)}}});export{A as Q,p as R,E as u};
