import { Formatter } from 'src/utils/formatter'

export class Establishment {
  constructor(
    public id: number = 0,
    public cnpj: string | null = null,
    public cpf: string = '',
    public businessName: string = '',
    public tradeName: string = '',
    public automaticStatusAnticipation: boolean = false,
    public initialValueCard: string = '0.00',
    public maximumNumberInstallments: number = 0,
    public cardCreditLimit: string = '0.00',
    public cardDebitLimit: string = '0.00',
    public totalBalance: string = '0.00',
    public amountToReceive: string = '0.00',
    public availableCreditBalance: string = '0.00',
    public outstandingCredit: string = '0.00',
    public splitPercentage: string = '0.00',
    public issuanceDate: string | null = null,
    public email: string = '',
    public phone: string = '',
    public street: string = '',
    public number: string = '',
    public complement: string = '',
    public neighborhood: string = '',
    public city: string = '',
    public state: string = '',
    public postalCode: string = '',
    public customerLimit: number = 0,
    public amountToReceiveWithFee: string = '0.00',
    public discountedByAnticipationFee: string = '0.00',
    public captureFee: string = '0.00',
    public splitDiscount: string = '0.00',
    public splitStatus: boolean = false,
    public supplierStatus: boolean = false,
    public status: boolean = false,
    public createdAt: string = '',
    public updatedAt: string = ''
  ) {}

  static fromJson(json: any): Establishment | undefined {
    if (!json) return;
    return new Establishment(
      json.id,
      json.cnpj,
      json.cpf,
      json.businessName,
      json.tradeName,
      json.automaticStatusAnticipation,
      json.initialValueCard,
      json.maximumNumberInstallments,
      json.cardCreditLimit,
      json.cardDebitLimit,
      json.totalBalance,
      json.amountToReceive,
      json.availableCreditBalance,
      json.outstandingCredit,
      json.splitPercentage,
      json.issuanceDate,
      json.email,
      json.phone,
      json.street,
      json.number,
      json.complement,
      json.neighborhood,
      json.city,
      json.state,
      json.postalCode,
      json.customerLimit,
      json.amountToReceiveWithFee,
      json.discountedByAnticipationFee,
      json.captureFee,
      json.splitDiscount,
      json.splitStatus,
      json.supplierStatus,
      json.status,
      json.createdAt,
      json.updatedAt
    );
  }

  public toJson() {
    return {
      id: this.id,
      cnpj: this.cnpj,
      cpf: Formatter.clearSymbolsAndLetters(this.cpf),
      businessName: this.businessName,
      tradeName: this.tradeName,
      automaticStatusAnticipation: this.automaticStatusAnticipation,
      initialValueCard: this.initialValueCard,
      maximumNumberInstallments: this.maximumNumberInstallments,
      cardCreditLimit: this.cardCreditLimit,
      cardDebitLimit: this.cardDebitLimit,
      totalBalance: this.totalBalance,
      amountToReceive: this.amountToReceive,
      availableCreditBalance: this.availableCreditBalance,
      outstandingCredit: this.outstandingCredit,
      splitPercentage: this.splitPercentage,
      issuanceDate: this.issuanceDate,
      email: this.email,
      phone: Formatter.clearSymbolsAndLetters(this.phone),
      street: this.street,
      number: this.number,
      complement: this.complement,
      neighborhood: this.neighborhood,
      city: this.city,
      state: this.state,
      postalCode: this.postalCode,
      customerLimit: this.customerLimit,
      amountToReceiveWithFee: this.amountToReceiveWithFee,
      discountedByAnticipationFee: this.discountedByAnticipationFee,
      captureFee: this.captureFee,
      splitDiscount: this.splitDiscount,
      splitStatus: this.splitStatus,
      supplierStatus: this.supplierStatus,
      status: this.status,
      createdAt: this.createdAt,
      updatedAt: this.updatedAt
    };
  }
}
